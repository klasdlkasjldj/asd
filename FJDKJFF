import socket
import threading
import select
import msg
import re
import requests
import datetime

SOCKS_VERSION = 5

Activation_code_Of_user = None


def getdate(playerid):
    global data, dc
    try:
        data = requests.get(f"http://bytehttprequest.mcpe.lol:25658/info/{playerid}").json()
        dc = data["date"]
        return dc
    except:
        return f"[b][c][ffea00]أقل من شـهـر"


def getreg(Id):
    url = "https://shop2game.com/api/auth/player_id_login"
    headers = {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate, br",
        "Accept-Language": "en-US,en;q=0.9,en;q=0.8",
        "Content-Type": "application/json",
        "Origin": "https://shop2game.com",
        "Referer": "https://shop2game.com/app",
        "sec-ch-ua": '"Google Chrome";v="111", "Not(A:Brand";v="8", "Chromium";v="111"',
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": "Windows",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36",
        "x-datadome-clientid": "10BIK2pOeN3Cw42~iX48rEAd2OmRt6MZDJQsEeK5uMirIKyTLO2bV5Ku6~7pJl_3QOmDkJoSzDcAdCAC8J5WRG_fpqrU7crOEq0~_5oqbgJIuVFWkbuUPD~lUpzSweEa",
    }
    payload = {
        "app_id": 100067,
        "login_id": f"{Id}",
        "app_server_id": 0,
    }
    response = requests.post(url, headers=headers, json=payload)
    try:
        if response.status_code == 200:
            return response.json()['region']
        else:
            return (f"ERROR")
    except:
        return ("السيرفر مش معروف")


def getname(Id):
    url = "https://shop2game.com/api/auth/player_id_login"
    headers = {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate, br",
        "Accept-Language": "ar,en-US;q=0.9,en;q=0.8",
        "Content-Type": "application/json",
        "Origin": "https://shop2game.com",
        "Referer": "https://shop2game.com/app",
        "sec-ch-ua": '"Chromium";v="116", "Not)A;Brand";v="24", "Google Chrome";v="116"', 
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": "Windows",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
        "X-Datadome-Clientid": "2O4JBmRJJLYQZWPKxhxJYwyaV-YZVZ7ht6034UDF8OpodgbXdUHZExd9-ux96sui5LywwN4q~1dF2CnkVCQ1Or5uQARvsvwvfEznsL72Dc_5_MuD0WeKMJcPgt2ZCbQ5",
    }
    payload = {
        "app_id": 100067,
        "login_id": f"{Id}",
        "app_server_id": 0,
    }
    response = requests.post(url, headers=headers, json=payload)
    try:
        if response.status_code == 200:
            return response.json()['nickname']
        else:
            return ("ERROR")
    except:
        return ("الإسـم مش معروف")


def get_status(Id):
    r = requests.get('https://ff.garena.com/api/antihack/check_banned?lang=en&uid={}'.format(Id))
    a = "0"
    try:
        if a in r.text:
            return "IS NOT BANNED"
        else:
            return "IS BANNED"
    except:
        return "NONE"

def mmm(remote,num,CHAT):
    print("before")
    print(num)
    result = get_leader(num)
    print(result)
    print('Skip 0f00')
    if result == "offline":
        gg = bytes.fromhex(msg.Encrypt_MESSAGE(f"[b][c][2e7d32]ㅤ -- معلومات اللاعب  --\n\n[ff3d00]NAME : ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ\n[18ffff]{getname(num)}\n\n[ba68c8]PLAYER : ㅤㅤㅤㅤㅤㅤㅤㅤㅤ\n[FF0000]{result}\n\n[76ff03]STATUS : ㅤㅤㅤㅤㅤㅤㅤㅤㅤ\n[1a237e]{get_status(num)}\n\n[e91e63]CREATED AT : ㅤㅤㅤㅤㅤㅤㅤ\n[9e9d24]{getdate(num)}",CHAT))
        remote.send(gg)
        print("offline")
    
    elif  result == "solo" :
        gg = bytes.fromhex(msg.Encrypt_MESSAGE(f"[b][c][2e7d32]ㅤ -- معلومات اللاعب  --\n\n[ff3d00]NAME : ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ\n\n[18ffff]{getname(num)}\n\n[ba68c8]PLAYER : ㅤㅤㅤㅤㅤㅤㅤㅤㅤ\n[00ff00]online - solo\n\n[e91e63]CREATED AT : ㅤㅤㅤㅤㅤㅤㅤ\n[9e9d24]{getdate(num)}",CHAT))
        remote.send(gg)
        print("solo")


    elif result == None:
        print("NONE !!!!!!!!!!")
        pass
    else:
        gg = bytes.fromhex(msg.Encrypt_MESSAGE(f"[b][c][2e7d32]ㅤ -- معلومات اللاعب  --\n\n[ff3d00]NAME : ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ\n\n[18ffff]{getname(num)}\n\n[ba68c8]PLAYER : ㅤㅤㅤㅤㅤㅤㅤㅤㅤ\n[76ff03]iN GROUP\n\n[e91e63]CREATED AT : ㅤㅤㅤㅤㅤㅤㅤ\n[9e9d24]{getdate(num)}",CHAT))
        tt = bytes.fromhex(msg.Encrypt_MESSAGE(f"[b][c][2e7d32]ㅤ -- معلومات قائد الفريق  -- \n\n\n\n[ffff00]TEAM LEADER :ㅤㅤㅤㅤㅤㅤ\n\n[76ff03]{result[0:4]} {result[4:]}\n\n[ff3d00]NAME : ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ\n\n[18ffff]{getname(result)}",CHAT))
        remote.send(gg)
        remote.send(tt)
        print("in group")
try:
    SERVER_HOST = '140.150.224.42'
    SERVER_PORT = 10033
    client_s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_s.connect((SERVER_HOST, SERVER_PORT))
    print("Connected with Server Successfully")
except:
    pass
def sayhello():
    client_s.send(Activation_code_Of_user.encode())

def EncryptFF(packet):
    client_s.send(bytes.fromhex(packet))
    response = client_s.recv(999999)
    return response.hex()

def convert_id(p_id):
    client_s.send(p_id.encode())
    response = client_s.recv(999999)
    print(f"RESPONSE --> {response}")
    return response.decode()

def get_leader(id):
    global dataS
    global five
    id = convert_id(id)
    if 11 > len(id) >= 9:
        packet = "0f1500000010"+EncryptFF(f"080112090a05{id}1005")
        print(f"PACKET --> {packet}")
        five.send(bytes.fromhex(packet))
    if len(id) == 8:
        packet = "0f1500000010"+EncryptFF(f"080112080a04{id}1005")
        five.send(bytes.fromhex(packet))
   
    while True:
        if "0f00" in dataS.hex()[0:4]:
            print("Fitched !")
            print(dataS.hex())
            print(len(dataS.hex()))
            if 60 > len(dataS.hex()) > 40:
                return "offline"

            if 70 < len(dataS.hex()) < 100:
                return "solo"

            if 130 > len(dataS.hex()) > 99:
                pattern = r'40(.{8,12})80'
                matches = re.findall(pattern, dataS.hex())
                print(matches)
                for match in matches:
                    if "a20" not in match[0:3] and "4" in match[-1:]:
                        target = match[:-1]
                        return msg.Decrypt_ID(target)
            break
                

class Proxy:
    def __init__(self):
        self.username = "username"
        self.password = "username"
        self.packet = b''
        self.sendmode = 'client-0-'

    def handle_client(self, connection):

        version, nmethods = connection.recv(2)

        methods = self.get_available_methods(nmethods, connection)

        if 2 not in set(methods):

            connection.close()
            return

        connection.sendall(bytes([SOCKS_VERSION, 2]))

        if not self.verify_credentials(connection):
            return

        version, cmd, _, address_type = connection.recv(4)
        

        if address_type == 1:
            address = socket.inet_ntoa(connection.recv(4))
        elif address_type == 3:
            domain_length = connection.recv(1)[0]
            address = connection.recv(domain_length)
            address = socket.gethostbyname(address)
            name= socket.gethostname()
            print(name)


        port = int.from_bytes(connection.recv(2), 'big', signed=False)
        port2 = port
        try:
            if cmd == 1:
                remote = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                remote.connect((address, port))
                bind_address = remote.getsockname()
            else:
                connection.close()

            addr = int.from_bytes(socket.inet_aton(
                bind_address[0]), 'big', signed=False)
            port = bind_address[1]

            reply = b''.join([
                SOCKS_VERSION.to_bytes(1, 'big'),
                int(0).to_bytes(1, 'big'),
                int(0).to_bytes(1, 'big'),
                int(1).to_bytes(1, 'big'),
                addr.to_bytes(4, 'big'),
                port.to_bytes(2, 'big')

            ])
        except Exception as e:

            reply = self.generate_failed_reply(address_type, 5)

        connection.sendall(reply)

        if reply[1] == 0 and cmd == 1:
            self.botdev(connection, remote, address, port2)
        connection.close()

    def generate_failed_reply(self, address_type, error_number):
        return b''.join([
            SOCKS_VERSION.to_bytes(1, 'big'),
            error_number.to_bytes(1, 'big'),
            int(0).to_bytes(1, 'big'),
            address_type.to_bytes(1, 'big'),
            int(0).to_bytes(4, 'big'),
            int(0).to_bytes(4, 'big')
        ])

    def verify_credentials(self, connection):
        version = ord(connection.recv(1))


        username_len = ord(connection.recv(1))
        username = connection.recv(username_len).decode('utf-8')

        password_len = ord(connection.recv(1))
        password = connection.recv(password_len).decode('utf-8')

        if username == self.username and password == self.password:

            response = bytes([version, 0])
            connection.sendall(response)
 
            return True
            

        response = bytes([version, 0xFF])
        connection.sendall(response)
        connection.close()
        return False

    def get_available_methods(self, nmethods, connection):
        methods = []
        for i in range(nmethods):
            methods.append(ord(connection.recv(1)))
        return methods

    def run(self, host, port):
        var = 0 
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind((host, port))
        s.listen()
        while True:
            conn, addr = s.accept()
            running = False
            t = threading.Thread(target=self.handle_client, args=(conn,))
            t.start()

    def botdev(self, client, remote, address, port):
        while True:
            global five

            if port == 39699:
                five = remote

            r, w, e = select.select([client, remote], [], [])
            if client in r or remote in r:

                if client in r:
                    try:
                        dataC = client.recv(999999)
                        remote.send(dataC)
                    except:
                        continue

                if remote in r:
                    global dataS
                    dataS = remote.recv(999999)
                    
                    if b"/send" in dataS:
                        remote.send(bytes.fromhex(msg.Encrypt_MESSAGE(f"[00ff00]غير متصل","468457374")))
                    # if "0f00" in dataS.hex()[0:4]:
                    #     print("-----------------------")
                    #     print(dataS.hex())
                    #     print("-----------------------")

                    if '1200' in dataS.hex()[0:4] and b'++' in dataS and "1215":
                        if b"***" in dataS:
                            dataS = dataS.replace(b"***", b"106")
                        print(dataS.hex())



                        pattern = r'10(.{8,10})18'
                        result = re.search(pattern, dataS.hex()[0:80])
                        CHAT = result.group(1)
                        CHAT = msg.Decrypt_ID(CHAT)
                        print(CHAT)




                        text = str(bytes.fromhex(dataS.hex()))
                        match = re.search(r'\+\+(.*?)\(', text)
                        TARGET = match.group(1)
                        print(TARGET)
                        threading.Thread(target=mmm,args=(remote,TARGET,CHAT)).start()

                    # 69354977
                    # e18b8921
                     
                   #c 12000000a808a7c4839f1e101220022a9b0108a7c4839f1e10e18b89211801220a2b2b313233343536373828a5a887a8064a140a0f42595445e385a4424f54e385a4563320c901520261726a600a5a68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f612f414367386f634c56614c486547346855746e724c5f374c51465f46495a747336326e4a34437453565562697a6e3153473d7339362d6310011801
                    # 12000000a908a7c4839f1e101220022a9c0108a7c4839f1e10e8bbf3ea021802220a2b2b313233343536373828aca987a8064a140a0f42595445e385a4424f54e385a4563320c901520261726a600a5a68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f612f414367386f634c56614c486547346855746e724c5f374c51465f46495a747336326e4a34437453565562697a6e3153473d7339362d6310011801

                    # 1215000000b01710b7fcb89c8b1ffdc514d78cd1d6667e084c94a72ca52cc4c9c282ae4a4e29b5a519a0374732202fc5a3a5bcbfc79d678c60417a97dca7ec9c11219cfb9cbc546c5e18172f9dc259113995b05c50bd66ba767a859208efee672cf38c5980d578437f13f94d33308e470a3d46c9dde4c4f8cc197330c7f56eb58a4c46fd500583a849679db2dbae16d0b72519702f7a96948bc5ef4fe07edb02a6489f68a6a4dca16f697708b78ded16ac42652dd761
                    # 1215000000b0906222ad779b62a04f44491a873c477d6b60122dcb8528f78bcd21f79067f618d13192182b1d845606b71e5c8e4bcb938f3edaabc8ae557e5ebd45c3b5193cf0053c92893e362701ed0529016f3d35a98c54b370cb9773357157c7038a3cd7cb29b4b1c70c1df1547743be020c3788892b0355d2eca9772f02f191d7a47f1183de4eba39cbad929a4ac97090f3e1913c2a29f8361539bbcc872dad5186e8ac1693468ec3302e7ef2c25b2fa9bf9037bc



                    client.send(dataS)


def startt(act_code):
    global Activation_code_Of_user
    Activation_code_Of_user = act_code
    try:
        threading.Thread(target=sayhello).start()
        Proxy().run('127.0.0.1',1080)
    except Exception as e:
        print(e)

